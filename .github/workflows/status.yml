name: Status Check

on:
  push:
    branches: [main]
  schedule:
    # Run status check daily at 8 AM UTC
    - cron: "0 8 * * *"
  workflow_dispatch:

jobs:
  health-check:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: "3.4"
          bundler-cache: true

      - name: Quick health check
        run: |
          echo "=== Prescient Gem Health Check ==="
          echo "Date: $(date)"
          echo "Commit: $(git rev-parse --short HEAD)"
          echo "Branch: $(git branch --show-current)"
          echo ""

          # Basic gem validation
          echo "🔍 Validating gemspec..."
          gem build prescient.gemspec > /dev/null
          echo "✅ Gemspec is valid"

          # Quick syntax check
          echo "🔍 Checking Ruby syntax..."
          find lib -name "*.rb" -exec ruby -c {} \; > /dev/null
          echo "✅ All Ruby files have valid syntax"

          # Dependency check
          echo "🔍 Checking dependencies..."
          bundle check
          echo "✅ All dependencies satisfied"

          # Quick test run
          echo "🔍 Running quick test suite..."
          if bundle exec rake test > test_output.log 2>&1; then
            echo "✅ All tests passing"
            PASSING_TESTS=$(grep -o "runs," test_output.log | wc -l)
            echo "   Tests run: $(grep -o '[0-9]* runs' test_output.log | head -1)"
            echo "   Assertions: $(grep -o '[0-9]* assertions' test_output.log | head -1)"
          else
            echo "❌ Some tests failing"
            tail -20 test_output.log
            exit 1
          fi

          # Coverage check
          echo "🔍 Checking test coverage..."
          if [ -f coverage/.resultset.json ]; then
            COVERAGE=$(ruby -r json -e "
              result = JSON.parse(File.read('coverage/.resultset.json'))
              covered = result['Unit Tests']['coverage'].values.count { |v| v > 0 }
              total = result['Unit Tests']['coverage'].size
              puts ((covered.to_f / total) * 100).round(2)
            ")
            echo "✅ Test coverage: ${COVERAGE}%"

            if (( $(echo "$COVERAGE < 85" | bc -l) )); then
              echo "⚠️  Coverage below 85% threshold"
            fi
          fi

          # Security check
          echo "🔍 Quick security scan..."
          gem install bundler-audit --no-document -q
          if bundler-audit --update > /dev/null 2>&1 && bundler-audit; then
            echo "✅ No known security vulnerabilities"
          else
            echo "⚠️  Security vulnerabilities detected"
          fi

          echo ""
          echo "=== Health Check Complete ==="

      - name: Update repository status
        if: github.ref == 'refs/heads/main'
        uses: actions/github-script@v6
        with:
          script: |
            // Update repository topics to reflect current status
            const { owner, repo } = context.repo;

            try {
              const topics = [
                'ruby', 'gem', 'ai', 'machine-learning',
                'openai', 'anthropic', 'ollama', 'huggingface',
                'provider-abstraction', 'fallback-support'
              ];

              await github.rest.repos.replaceAllTopics({
                owner,
                repo,
                names: topics
              });

              console.log('Repository topics updated successfully');
            } catch (error) {
              console.log('Failed to update repository topics:', error.message);
            }

      - name: Create status summary
        run: |
          cat > status_summary.md << EOF
          # Prescient Gem Status Report

          **Generated**: $(date)
          **Commit**: $(git rev-parse --short HEAD)
          **Branch**: $(git branch --show-current)

          ## ✅ Health Status: HEALTHY

          - 🔧 Gemspec: Valid
          - 🐛 Syntax: Clean
          - 📦 Dependencies: Satisfied
          - 🧪 Tests: $(grep -o '[0-9]* runs' test_output.log | head -1) - All Passing
          - 📊 Coverage: ${COVERAGE}% (Target: 85%+)
          - 🔒 Security: No Known Vulnerabilities

          ## 📈 Recent Activity

          $(git log --oneline -5)

          ## 🚀 Quick Start

          \`\`\`bash
          gem install prescient
          \`\`\`

          \`\`\`ruby
          require 'prescient'
          client = Prescient.client
          response = client.generate_response("Hello, AI!")
          \`\`\`

          ---
          *This report is automatically generated by GitHub Actions*
          EOF

          echo "Status summary created"

      - name: Upload status artifacts
        uses: actions/upload-artifact@v4
        with:
          name: status-report
          path: |
            status_summary.md
            test_output.log

  notify-on-failure:
    runs-on: ubuntu-latest
    needs: health-check
    if: failure()

    steps:
      - name: Create failure issue
        uses: actions/github-script@v6
        with:
          script: |
            const { owner, repo } = context.repo;
            const runUrl = `https://github.com/${owner}/${repo}/actions/runs/${context.runId}`;

            const issueBody = `
            ## 🚨 Health Check Failed

            The automated health check has failed on the main branch.

            **Details:**
            - **Time**: ${new Date().toISOString()}
            - **Commit**: ${context.sha.substring(0, 7)}
            - **Workflow Run**: [View Details](${runUrl})

            **Possible causes:**
            - Test failures
            - Security vulnerabilities detected
            - Dependency issues
            - Syntax errors

            **Action Required:**
            Please investigate and fix the issues as soon as possible.

            ---
            *This issue was automatically created by the status check workflow.*
            `;

            // Check if there's already an open health check issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner,
              repo,
              labels: 'health-check,automated',
              state: 'open'
            });

            if (issues.length === 0) {
              await github.rest.issues.create({
                owner,
                repo,
                title: '🚨 Health Check Failed - Action Required',
                body: issueBody,
                labels: ['health-check', 'automated', 'bug', 'priority-high']
              });
            } else {
              // Update existing issue
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number: issues[0].number,
                body: `Health check failed again at ${new Date().toISOString()}. [View Details](${runUrl})`
              });
            }
